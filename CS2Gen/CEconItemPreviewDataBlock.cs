// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: econ.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from econ.proto</summary>
public static partial class EconReflection
{

    #region Descriptor
    /// <summary>File descriptor for econ.proto</summary>
    public static pbr::FileDescriptor Descriptor
    {
        get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EconReflection()
    {
        byte[] descriptorData = global::System.Convert.FromBase64String(
            string.Concat(
              "CgplY29uLnByb3RvIq0HChlDRWNvbkl0ZW1QcmV2aWV3RGF0YUJsb2NrEhYK",
              "CWFjY291bnRpZBgBIAEoDUgAiAEBEhMKBml0ZW1pZBgCIAEoBEgBiAEBEhUK",
              "CGRlZmluZGV4GAMgASgNSAKIAQESFwoKcGFpbnRpbmRleBgEIAEoDUgDiAEB",
              "EhMKBnJhcml0eRgFIAEoDUgEiAEBEhQKB3F1YWxpdHkYBiABKA1IBYgBARIW",
              "CglwYWludHdlYXIYByABKA1IBogBARIWCglwYWludHNlZWQYCCABKA1IB4gB",
              "ARIfChJraWxsZWF0ZXJzY29yZXR5cGUYCSABKA1ICIgBARIbCg5raWxsZWF0",
              "ZXJ2YWx1ZRgKIAEoDUgJiAEBEhcKCmN1c3RvbW5hbWUYCyABKAlICogBARI0",
              "CghzdGlja2VycxgMIAMoCzIiLkNFY29uSXRlbVByZXZpZXdEYXRhQmxvY2su",
              "U3RpY2tlchIWCglpbnZlbnRvcnkYDSABKA1IC4gBARITCgZvcmlnaW4YDiAB",
              "KA1IDIgBARIUCgdxdWVzdGlkGA8gASgNSA2IAQESFwoKZHJvcHJlYXNvbhgQ",
              "IAEoDUgOiAEBEhcKCm11c2ljaW5kZXgYESABKA1ID4gBARIVCghlbnRpbmRl",
              "eBgSIAEoBUgQiAEBGs0BCgdTdGlja2VyEhEKBHNsb3QYASABKA1IAIgBARIX",
              "CgpzdGlja2VyX2lkGAIgASgNSAGIAQESEQoEd2VhchgDIAEoAkgCiAEBEhIK",
              "BXNjYWxlGAQgASgCSAOIAQESFQoIcm90YXRpb24YBSABKAJIBIgBARIUCgd0",
              "aW50X2lkGAYgASgNSAWIAQFCBwoFX3Nsb3RCDQoLX3N0aWNrZXJfaWRCBwoF",
              "X3dlYXJCCAoGX3NjYWxlQgsKCV9yb3RhdGlvbkIKCghfdGludF9pZEIMCgpf",
              "YWNjb3VudGlkQgkKB19pdGVtaWRCCwoJX2RlZmluZGV4Qg0KC19wYWludGlu",
              "ZGV4QgkKB19yYXJpdHlCCgoIX3F1YWxpdHlCDAoKX3BhaW50d2VhckIMCgpf",
              "cGFpbnRzZWVkQhUKE19raWxsZWF0ZXJzY29yZXR5cGVCEQoPX2tpbGxlYXRl",
              "cnZhbHVlQg0KC19jdXN0b21uYW1lQgwKCl9pbnZlbnRvcnlCCQoHX29yaWdp",
              "bkIKCghfcXVlc3RpZEINCgtfZHJvcHJlYXNvbkINCgtfbXVzaWNpbmRleEIL",
              "CglfZW50aW5kZXhiBnByb3RvMw=="));
        descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
            new pbr::FileDescriptor[] { },
            new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CEconItemPreviewDataBlock), global::CEconItemPreviewDataBlock.Parser, new[]{ "Accountid", "Itemid", "Defindex", "Paintindex", "Rarity", "Quality", "Paintwear", "Paintseed", "Killeaterscoretype", "Killeatervalue", "Customname", "Stickers", "Inventory", "Origin", "Questid", "Dropreason", "Musicindex", "Entindex" }, new[]{ "Accountid", "Itemid", "Defindex", "Paintindex", "Rarity", "Quality", "Paintwear", "Paintseed", "Killeaterscoretype", "Killeatervalue", "Customname", "Inventory", "Origin", "Questid", "Dropreason", "Musicindex", "Entindex" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::CEconItemPreviewDataBlock.Types.Sticker), global::CEconItemPreviewDataBlock.Types.Sticker.Parser, new[]{ "Slot", "StickerId", "Wear", "Scale", "Rotation", "TintId" }, new[]{ "Slot", "StickerId", "Wear", "Scale", "Rotation", "TintId" }, null, null, null)})
            }));
    }
    #endregion

}
#region Messages
[global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
public sealed partial class CEconItemPreviewDataBlock : pb::IMessage<CEconItemPreviewDataBlock>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    , pb::IBufferMessage
#endif
{
    private static readonly pb::MessageParser<CEconItemPreviewDataBlock> _parser = new pb::MessageParser<CEconItemPreviewDataBlock>(() => new CEconItemPreviewDataBlock());
    private pb::UnknownFieldSet _unknownFields;
    private int _hasBits0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<CEconItemPreviewDataBlock> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor
    {
        get { return global::EconReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor
    {
        get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CEconItemPreviewDataBlock()
    {
        OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CEconItemPreviewDataBlock(CEconItemPreviewDataBlock other) : this()
    {
        _hasBits0 = other._hasBits0;
        accountid_ = other.accountid_;
        itemid_ = other.itemid_;
        defindex_ = other.defindex_;
        paintindex_ = other.paintindex_;
        rarity_ = other.rarity_;
        quality_ = other.quality_;
        paintwear_ = other.paintwear_;
        paintseed_ = other.paintseed_;
        killeaterscoretype_ = other.killeaterscoretype_;
        killeatervalue_ = other.killeatervalue_;
        customname_ = other.customname_;
        stickers_ = other.stickers_.Clone();
        inventory_ = other.inventory_;
        origin_ = other.origin_;
        questid_ = other.questid_;
        dropreason_ = other.dropreason_;
        musicindex_ = other.musicindex_;
        entindex_ = other.entindex_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public CEconItemPreviewDataBlock Clone()
    {
        return new CEconItemPreviewDataBlock(this);
    }

    /// <summary>Field number for the "accountid" field.</summary>
    public const int AccountidFieldNumber = 1;
    private readonly static uint AccountidDefaultValue = 0;

    private uint accountid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Accountid
    {
        get { if ((_hasBits0 & 1) != 0) { return accountid_; } else { return AccountidDefaultValue; } }
        set
        {
            _hasBits0 |= 1;
            accountid_ = value;
        }
    }
    /// <summary>Gets whether the "accountid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasAccountid
    {
        get { return (_hasBits0 & 1) != 0; }
    }
    /// <summary>Clears the value of the "accountid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearAccountid()
    {
        _hasBits0 &= ~1;
    }

    /// <summary>Field number for the "itemid" field.</summary>
    public const int ItemidFieldNumber = 2;
    private readonly static ulong ItemidDefaultValue = 0UL;

    private ulong itemid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong Itemid
    {
        get { if ((_hasBits0 & 2) != 0) { return itemid_; } else { return ItemidDefaultValue; } }
        set
        {
            _hasBits0 |= 2;
            itemid_ = value;
        }
    }
    /// <summary>Gets whether the "itemid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasItemid
    {
        get { return (_hasBits0 & 2) != 0; }
    }
    /// <summary>Clears the value of the "itemid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearItemid()
    {
        _hasBits0 &= ~2;
    }

    /// <summary>Field number for the "defindex" field.</summary>
    public const int DefindexFieldNumber = 3;
    private readonly static uint DefindexDefaultValue = 0;

    private uint defindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Defindex
    {
        get { if ((_hasBits0 & 4) != 0) { return defindex_; } else { return DefindexDefaultValue; } }
        set
        {
            _hasBits0 |= 4;
            defindex_ = value;
        }
    }
    /// <summary>Gets whether the "defindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDefindex
    {
        get { return (_hasBits0 & 4) != 0; }
    }
    /// <summary>Clears the value of the "defindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDefindex()
    {
        _hasBits0 &= ~4;
    }

    /// <summary>Field number for the "paintindex" field.</summary>
    public const int PaintindexFieldNumber = 4;
    private readonly static uint PaintindexDefaultValue = 0;

    private uint paintindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Paintindex
    {
        get { if ((_hasBits0 & 8) != 0) { return paintindex_; } else { return PaintindexDefaultValue; } }
        set
        {
            _hasBits0 |= 8;
            paintindex_ = value;
        }
    }
    /// <summary>Gets whether the "paintindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPaintindex
    {
        get { return (_hasBits0 & 8) != 0; }
    }
    /// <summary>Clears the value of the "paintindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPaintindex()
    {
        _hasBits0 &= ~8;
    }

    /// <summary>Field number for the "rarity" field.</summary>
    public const int RarityFieldNumber = 5;
    private readonly static uint RarityDefaultValue = 0;

    private uint rarity_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Rarity
    {
        get { if ((_hasBits0 & 16) != 0) { return rarity_; } else { return RarityDefaultValue; } }
        set
        {
            _hasBits0 |= 16;
            rarity_ = value;
        }
    }
    /// <summary>Gets whether the "rarity" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasRarity
    {
        get { return (_hasBits0 & 16) != 0; }
    }
    /// <summary>Clears the value of the "rarity" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearRarity()
    {
        _hasBits0 &= ~16;
    }

    /// <summary>Field number for the "quality" field.</summary>
    public const int QualityFieldNumber = 6;
    private readonly static uint QualityDefaultValue = 0;

    private uint quality_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Quality
    {
        get { if ((_hasBits0 & 32) != 0) { return quality_; } else { return QualityDefaultValue; } }
        set
        {
            _hasBits0 |= 32;
            quality_ = value;
        }
    }
    /// <summary>Gets whether the "quality" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasQuality
    {
        get { return (_hasBits0 & 32) != 0; }
    }
    /// <summary>Clears the value of the "quality" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearQuality()
    {
        _hasBits0 &= ~32;
    }

    /// <summary>Field number for the "paintwear" field.</summary>
    public const int PaintwearFieldNumber = 7;
    private readonly static uint PaintwearDefaultValue = 0;

    private uint paintwear_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Paintwear
    {
        get { if ((_hasBits0 & 64) != 0) { return paintwear_; } else { return PaintwearDefaultValue; } }
        set
        {
            _hasBits0 |= 64;
            paintwear_ = value;
        }
    }
    /// <summary>Gets whether the "paintwear" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPaintwear
    {
        get { return (_hasBits0 & 64) != 0; }
    }
    /// <summary>Clears the value of the "paintwear" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPaintwear()
    {
        _hasBits0 &= ~64;
    }

    /// <summary>Field number for the "paintseed" field.</summary>
    public const int PaintseedFieldNumber = 8;
    private readonly static uint PaintseedDefaultValue = 0;

    private uint paintseed_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Paintseed
    {
        get { if ((_hasBits0 & 128) != 0) { return paintseed_; } else { return PaintseedDefaultValue; } }
        set
        {
            _hasBits0 |= 128;
            paintseed_ = value;
        }
    }
    /// <summary>Gets whether the "paintseed" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasPaintseed
    {
        get { return (_hasBits0 & 128) != 0; }
    }
    /// <summary>Clears the value of the "paintseed" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearPaintseed()
    {
        _hasBits0 &= ~128;
    }

    /// <summary>Field number for the "killeaterscoretype" field.</summary>
    public const int KilleaterscoretypeFieldNumber = 9;
    private readonly static uint KilleaterscoretypeDefaultValue = 0;

    private uint killeaterscoretype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Killeaterscoretype
    {
        get { if ((_hasBits0 & 256) != 0) { return killeaterscoretype_; } else { return KilleaterscoretypeDefaultValue; } }
        set
        {
            _hasBits0 |= 256;
            killeaterscoretype_ = value;
        }
    }
    /// <summary>Gets whether the "killeaterscoretype" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasKilleaterscoretype
    {
        get { return (_hasBits0 & 256) != 0; }
    }
    /// <summary>Clears the value of the "killeaterscoretype" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearKilleaterscoretype()
    {
        _hasBits0 &= ~256;
    }

    /// <summary>Field number for the "killeatervalue" field.</summary>
    public const int KilleatervalueFieldNumber = 10;
    private readonly static uint KilleatervalueDefaultValue = 0;

    private uint killeatervalue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Killeatervalue
    {
        get { if ((_hasBits0 & 512) != 0) { return killeatervalue_; } else { return KilleatervalueDefaultValue; } }
        set
        {
            _hasBits0 |= 512;
            killeatervalue_ = value;
        }
    }
    /// <summary>Gets whether the "killeatervalue" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasKilleatervalue
    {
        get { return (_hasBits0 & 512) != 0; }
    }
    /// <summary>Clears the value of the "killeatervalue" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearKilleatervalue()
    {
        _hasBits0 &= ~512;
    }

    /// <summary>Field number for the "customname" field.</summary>
    public const int CustomnameFieldNumber = 11;
    private readonly static string CustomnameDefaultValue = "";

    private string customname_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Customname
    {
        get { return customname_ ?? CustomnameDefaultValue; }
        set
        {
            customname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
    }
    /// <summary>Gets whether the "customname" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasCustomname
    {
        get { return customname_ != null; }
    }
    /// <summary>Clears the value of the "customname" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearCustomname()
    {
        customname_ = null;
    }

    /// <summary>Field number for the "stickers" field.</summary>
    public const int StickersFieldNumber = 12;
    private static readonly pb::FieldCodec<global::CEconItemPreviewDataBlock.Types.Sticker> _repeated_stickers_codec
        = pb::FieldCodec.ForMessage(98, global::CEconItemPreviewDataBlock.Types.Sticker.Parser);
    private readonly pbc::RepeatedField<global::CEconItemPreviewDataBlock.Types.Sticker> stickers_ = new pbc::RepeatedField<global::CEconItemPreviewDataBlock.Types.Sticker>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::CEconItemPreviewDataBlock.Types.Sticker> Stickers
    {
        get { return stickers_; }
    }

    /// <summary>Field number for the "inventory" field.</summary>
    public const int InventoryFieldNumber = 13;
    private readonly static uint InventoryDefaultValue = 0;

    private uint inventory_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Inventory
    {
        get { if ((_hasBits0 & 1024) != 0) { return inventory_; } else { return InventoryDefaultValue; } }
        set
        {
            _hasBits0 |= 1024;
            inventory_ = value;
        }
    }
    /// <summary>Gets whether the "inventory" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasInventory
    {
        get { return (_hasBits0 & 1024) != 0; }
    }
    /// <summary>Clears the value of the "inventory" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearInventory()
    {
        _hasBits0 &= ~1024;
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 14;
    private readonly static uint OriginDefaultValue = 0;

    private uint origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Origin
    {
        get { if ((_hasBits0 & 2048) != 0) { return origin_; } else { return OriginDefaultValue; } }
        set
        {
            _hasBits0 |= 2048;
            origin_ = value;
        }
    }
    /// <summary>Gets whether the "origin" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasOrigin
    {
        get { return (_hasBits0 & 2048) != 0; }
    }
    /// <summary>Clears the value of the "origin" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearOrigin()
    {
        _hasBits0 &= ~2048;
    }

    /// <summary>Field number for the "questid" field.</summary>
    public const int QuestidFieldNumber = 15;
    private readonly static uint QuestidDefaultValue = 0;

    private uint questid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Questid
    {
        get { if ((_hasBits0 & 4096) != 0) { return questid_; } else { return QuestidDefaultValue; } }
        set
        {
            _hasBits0 |= 4096;
            questid_ = value;
        }
    }
    /// <summary>Gets whether the "questid" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasQuestid
    {
        get { return (_hasBits0 & 4096) != 0; }
    }
    /// <summary>Clears the value of the "questid" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearQuestid()
    {
        _hasBits0 &= ~4096;
    }

    /// <summary>Field number for the "dropreason" field.</summary>
    public const int DropreasonFieldNumber = 16;
    private readonly static uint DropreasonDefaultValue = 0;

    private uint dropreason_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Dropreason
    {
        get { if ((_hasBits0 & 8192) != 0) { return dropreason_; } else { return DropreasonDefaultValue; } }
        set
        {
            _hasBits0 |= 8192;
            dropreason_ = value;
        }
    }
    /// <summary>Gets whether the "dropreason" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasDropreason
    {
        get { return (_hasBits0 & 8192) != 0; }
    }
    /// <summary>Clears the value of the "dropreason" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearDropreason()
    {
        _hasBits0 &= ~8192;
    }

    /// <summary>Field number for the "musicindex" field.</summary>
    public const int MusicindexFieldNumber = 17;
    private readonly static uint MusicindexDefaultValue = 0;

    private uint musicindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint Musicindex
    {
        get { if ((_hasBits0 & 16384) != 0) { return musicindex_; } else { return MusicindexDefaultValue; } }
        set
        {
            _hasBits0 |= 16384;
            musicindex_ = value;
        }
    }
    /// <summary>Gets whether the "musicindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasMusicindex
    {
        get { return (_hasBits0 & 16384) != 0; }
    }
    /// <summary>Clears the value of the "musicindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearMusicindex()
    {
        _hasBits0 &= ~16384;
    }

    /// <summary>Field number for the "entindex" field.</summary>
    public const int EntindexFieldNumber = 18;
    private readonly static int EntindexDefaultValue = 0;

    private int entindex_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Entindex
    {
        get { if ((_hasBits0 & 32768) != 0) { return entindex_; } else { return EntindexDefaultValue; } }
        set
        {
            _hasBits0 |= 32768;
            entindex_ = value;
        }
    }
    /// <summary>Gets whether the "entindex" field is set</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool HasEntindex
    {
        get { return (_hasBits0 & 32768) != 0; }
    }
    /// <summary>Clears the value of the "entindex" field</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void ClearEntindex()
    {
        _hasBits0 &= ~32768;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other)
    {
        return Equals(other as CEconItemPreviewDataBlock);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(CEconItemPreviewDataBlock other)
    {
        if (ReferenceEquals(other, null))
        {
            return false;
        }
        if (ReferenceEquals(other, this))
        {
            return true;
        }
        if (Accountid != other.Accountid) return false;
        if (Itemid != other.Itemid) return false;
        if (Defindex != other.Defindex) return false;
        if (Paintindex != other.Paintindex) return false;
        if (Rarity != other.Rarity) return false;
        if (Quality != other.Quality) return false;
        if (Paintwear != other.Paintwear) return false;
        if (Paintseed != other.Paintseed) return false;
        if (Killeaterscoretype != other.Killeaterscoretype) return false;
        if (Killeatervalue != other.Killeatervalue) return false;
        if (Customname != other.Customname) return false;
        if (!stickers_.Equals(other.stickers_)) return false;
        if (Inventory != other.Inventory) return false;
        if (Origin != other.Origin) return false;
        if (Questid != other.Questid) return false;
        if (Dropreason != other.Dropreason) return false;
        if (Musicindex != other.Musicindex) return false;
        if (Entindex != other.Entindex) return false;
        return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode()
    {
        int hash = 1;
        if (HasAccountid) hash ^= Accountid.GetHashCode();
        if (HasItemid) hash ^= Itemid.GetHashCode();
        if (HasDefindex) hash ^= Defindex.GetHashCode();
        if (HasPaintindex) hash ^= Paintindex.GetHashCode();
        if (HasRarity) hash ^= Rarity.GetHashCode();
        if (HasQuality) hash ^= Quality.GetHashCode();
        if (HasPaintwear) hash ^= Paintwear.GetHashCode();
        if (HasPaintseed) hash ^= Paintseed.GetHashCode();
        if (HasKilleaterscoretype) hash ^= Killeaterscoretype.GetHashCode();
        if (HasKilleatervalue) hash ^= Killeatervalue.GetHashCode();
        if (HasCustomname) hash ^= Customname.GetHashCode();
        hash ^= stickers_.GetHashCode();
        if (HasInventory) hash ^= Inventory.GetHashCode();
        if (HasOrigin) hash ^= Origin.GetHashCode();
        if (HasQuestid) hash ^= Questid.GetHashCode();
        if (HasDropreason) hash ^= Dropreason.GetHashCode();
        if (HasMusicindex) hash ^= Musicindex.GetHashCode();
        if (HasEntindex) hash ^= Entindex.GetHashCode();
        if (_unknownFields != null)
        {
            hash ^= _unknownFields.GetHashCode();
        }
        return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString()
    {
        return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        output.WriteRawMessage(this);
#else
    if (HasAccountid) {
      output.WriteRawTag(8);
      output.WriteUInt32(Accountid);
    }
    if (HasItemid) {
      output.WriteRawTag(16);
      output.WriteUInt64(Itemid);
    }
    if (HasDefindex) {
      output.WriteRawTag(24);
      output.WriteUInt32(Defindex);
    }
    if (HasPaintindex) {
      output.WriteRawTag(32);
      output.WriteUInt32(Paintindex);
    }
    if (HasRarity) {
      output.WriteRawTag(40);
      output.WriteUInt32(Rarity);
    }
    if (HasQuality) {
      output.WriteRawTag(48);
      output.WriteUInt32(Quality);
    }
    if (HasPaintwear) {
      output.WriteRawTag(56);
      output.WriteUInt32(Paintwear);
    }
    if (HasPaintseed) {
      output.WriteRawTag(64);
      output.WriteUInt32(Paintseed);
    }
    if (HasKilleaterscoretype) {
      output.WriteRawTag(72);
      output.WriteUInt32(Killeaterscoretype);
    }
    if (HasKilleatervalue) {
      output.WriteRawTag(80);
      output.WriteUInt32(Killeatervalue);
    }
    if (HasCustomname) {
      output.WriteRawTag(90);
      output.WriteString(Customname);
    }
    stickers_.WriteTo(output, _repeated_stickers_codec);
    if (HasInventory) {
      output.WriteRawTag(104);
      output.WriteUInt32(Inventory);
    }
    if (HasOrigin) {
      output.WriteRawTag(112);
      output.WriteUInt32(Origin);
    }
    if (HasQuestid) {
      output.WriteRawTag(120);
      output.WriteUInt32(Questid);
    }
    if (HasDropreason) {
      output.WriteRawTag(128, 1);
      output.WriteUInt32(Dropreason);
    }
    if (HasMusicindex) {
      output.WriteRawTag(136, 1);
      output.WriteUInt32(Musicindex);
    }
    if (HasEntindex) {
      output.WriteRawTag(144, 1);
      output.WriteInt32(Entindex);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
    {
        if (HasAccountid)
        {
            output.WriteRawTag(8);
            output.WriteUInt32(Accountid);
        }
        if (HasItemid)
        {
            output.WriteRawTag(16);
            output.WriteUInt64(Itemid);
        }
        if (HasDefindex)
        {
            output.WriteRawTag(24);
            output.WriteUInt32(Defindex);
        }
        if (HasPaintindex)
        {
            output.WriteRawTag(32);
            output.WriteUInt32(Paintindex);
        }
        if (HasRarity)
        {
            output.WriteRawTag(40);
            output.WriteUInt32(Rarity);
        }
        if (HasQuality)
        {
            output.WriteRawTag(48);
            output.WriteUInt32(Quality);
        }
        if (HasPaintwear)
        {
            output.WriteRawTag(56);
            output.WriteUInt32(Paintwear);
        }
        if (HasPaintseed)
        {
            output.WriteRawTag(64);
            output.WriteUInt32(Paintseed);
        }
        if (HasKilleaterscoretype)
        {
            output.WriteRawTag(72);
            output.WriteUInt32(Killeaterscoretype);
        }
        if (HasKilleatervalue)
        {
            output.WriteRawTag(80);
            output.WriteUInt32(Killeatervalue);
        }
        if (HasCustomname)
        {
            output.WriteRawTag(90);
            output.WriteString(Customname);
        }
        stickers_.WriteTo(ref output, _repeated_stickers_codec);
        if (HasInventory)
        {
            output.WriteRawTag(104);
            output.WriteUInt32(Inventory);
        }
        if (HasOrigin)
        {
            output.WriteRawTag(112);
            output.WriteUInt32(Origin);
        }
        if (HasQuestid)
        {
            output.WriteRawTag(120);
            output.WriteUInt32(Questid);
        }
        if (HasDropreason)
        {
            output.WriteRawTag(128, 1);
            output.WriteUInt32(Dropreason);
        }
        if (HasMusicindex)
        {
            output.WriteRawTag(136, 1);
            output.WriteUInt32(Musicindex);
        }
        if (HasEntindex)
        {
            output.WriteRawTag(144, 1);
            output.WriteInt32(Entindex);
        }
        if (_unknownFields != null)
        {
            _unknownFields.WriteTo(ref output);
        }
    }
#endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize()
    {
        int size = 0;
        if (HasAccountid)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Accountid);
        }
        if (HasItemid)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Itemid);
        }
        if (HasDefindex)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Defindex);
        }
        if (HasPaintindex)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Paintindex);
        }
        if (HasRarity)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Rarity);
        }
        if (HasQuality)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Quality);
        }
        if (HasPaintwear)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Paintwear);
        }
        if (HasPaintseed)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Paintseed);
        }
        if (HasKilleaterscoretype)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Killeaterscoretype);
        }
        if (HasKilleatervalue)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Killeatervalue);
        }
        if (HasCustomname)
        {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Customname);
        }
        size += stickers_.CalculateSize(_repeated_stickers_codec);
        if (HasInventory)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Inventory);
        }
        if (HasOrigin)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Origin);
        }
        if (HasQuestid)
        {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Questid);
        }
        if (HasDropreason)
        {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Dropreason);
        }
        if (HasMusicindex)
        {
            size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Musicindex);
        }
        if (HasEntindex)
        {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(Entindex);
        }
        if (_unknownFields != null)
        {
            size += _unknownFields.CalculateSize();
        }
        return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(CEconItemPreviewDataBlock other)
    {
        if (other == null)
        {
            return;
        }
        if (other.HasAccountid)
        {
            Accountid = other.Accountid;
        }
        if (other.HasItemid)
        {
            Itemid = other.Itemid;
        }
        if (other.HasDefindex)
        {
            Defindex = other.Defindex;
        }
        if (other.HasPaintindex)
        {
            Paintindex = other.Paintindex;
        }
        if (other.HasRarity)
        {
            Rarity = other.Rarity;
        }
        if (other.HasQuality)
        {
            Quality = other.Quality;
        }
        if (other.HasPaintwear)
        {
            Paintwear = other.Paintwear;
        }
        if (other.HasPaintseed)
        {
            Paintseed = other.Paintseed;
        }
        if (other.HasKilleaterscoretype)
        {
            Killeaterscoretype = other.Killeaterscoretype;
        }
        if (other.HasKilleatervalue)
        {
            Killeatervalue = other.Killeatervalue;
        }
        if (other.HasCustomname)
        {
            Customname = other.Customname;
        }
        stickers_.Add(other.stickers_);
        if (other.HasInventory)
        {
            Inventory = other.Inventory;
        }
        if (other.HasOrigin)
        {
            Origin = other.Origin;
        }
        if (other.HasQuestid)
        {
            Questid = other.Questid;
        }
        if (other.HasDropreason)
        {
            Dropreason = other.Dropreason;
        }
        if (other.HasMusicindex)
        {
            Musicindex = other.Musicindex;
        }
        if (other.HasEntindex)
        {
            Entindex = other.Entindex;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input)
    {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        input.ReadRawMessage(this);
#else
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Accountid = input.ReadUInt32();
          break;
        }
        case 16: {
          Itemid = input.ReadUInt64();
          break;
        }
        case 24: {
          Defindex = input.ReadUInt32();
          break;
        }
        case 32: {
          Paintindex = input.ReadUInt32();
          break;
        }
        case 40: {
          Rarity = input.ReadUInt32();
          break;
        }
        case 48: {
          Quality = input.ReadUInt32();
          break;
        }
        case 56: {
          Paintwear = input.ReadUInt32();
          break;
        }
        case 64: {
          Paintseed = input.ReadUInt32();
          break;
        }
        case 72: {
          Killeaterscoretype = input.ReadUInt32();
          break;
        }
        case 80: {
          Killeatervalue = input.ReadUInt32();
          break;
        }
        case 90: {
          Customname = input.ReadString();
          break;
        }
        case 98: {
          stickers_.AddEntriesFrom(input, _repeated_stickers_codec);
          break;
        }
        case 104: {
          Inventory = input.ReadUInt32();
          break;
        }
        case 112: {
          Origin = input.ReadUInt32();
          break;
        }
        case 120: {
          Questid = input.ReadUInt32();
          break;
        }
        case 128: {
          Dropreason = input.ReadUInt32();
          break;
        }
        case 136: {
          Musicindex = input.ReadUInt32();
          break;
        }
        case 144: {
          Entindex = input.ReadInt32();
          break;
        }
      }
    }
#endif
    }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
    {
        uint tag;
        while ((tag = input.ReadTag()) != 0)
        {
            switch (tag)
            {
                default:
                    _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                    break;
                case 8:
                    {
                        Accountid = input.ReadUInt32();
                        break;
                    }
                case 16:
                    {
                        Itemid = input.ReadUInt64();
                        break;
                    }
                case 24:
                    {
                        Defindex = input.ReadUInt32();
                        break;
                    }
                case 32:
                    {
                        Paintindex = input.ReadUInt32();
                        break;
                    }
                case 40:
                    {
                        Rarity = input.ReadUInt32();
                        break;
                    }
                case 48:
                    {
                        Quality = input.ReadUInt32();
                        break;
                    }
                case 56:
                    {
                        Paintwear = input.ReadUInt32();
                        break;
                    }
                case 64:
                    {
                        Paintseed = input.ReadUInt32();
                        break;
                    }
                case 72:
                    {
                        Killeaterscoretype = input.ReadUInt32();
                        break;
                    }
                case 80:
                    {
                        Killeatervalue = input.ReadUInt32();
                        break;
                    }
                case 90:
                    {
                        Customname = input.ReadString();
                        break;
                    }
                case 98:
                    {
                        stickers_.AddEntriesFrom(ref input, _repeated_stickers_codec);
                        break;
                    }
                case 104:
                    {
                        Inventory = input.ReadUInt32();
                        break;
                    }
                case 112:
                    {
                        Origin = input.ReadUInt32();
                        break;
                    }
                case 120:
                    {
                        Questid = input.ReadUInt32();
                        break;
                    }
                case 128:
                    {
                        Dropreason = input.ReadUInt32();
                        break;
                    }
                case 136:
                    {
                        Musicindex = input.ReadUInt32();
                        break;
                    }
                case 144:
                    {
                        Entindex = input.ReadInt32();
                        break;
                    }
            }
        }
    }
#endif

    #region Nested types
    /// <summary>Container for nested types declared in the CEconItemPreviewDataBlock message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types
    {
        [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
        public sealed partial class Sticker : pb::IMessage<Sticker>
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            , pb::IBufferMessage
#endif
        {
            private static readonly pb::MessageParser<Sticker> _parser = new pb::MessageParser<Sticker>(() => new Sticker());
            private pb::UnknownFieldSet _unknownFields;
            private int _hasBits0;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pb::MessageParser<Sticker> Parser { get { return _parser; } }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public static pbr::MessageDescriptor Descriptor
            {
                get { return global::CEconItemPreviewDataBlock.Descriptor.NestedTypes[0]; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            pbr::MessageDescriptor pb::IMessage.Descriptor
            {
                get { return Descriptor; }
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public Sticker()
            {
                OnConstruction();
            }

            partial void OnConstruction();

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public Sticker(Sticker other) : this()
            {
                _hasBits0 = other._hasBits0;
                slot_ = other.slot_;
                stickerId_ = other.stickerId_;
                wear_ = other.wear_;
                scale_ = other.scale_;
                rotation_ = other.rotation_;
                tintId_ = other.tintId_;
                _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public Sticker Clone()
            {
                return new Sticker(this);
            }

            /// <summary>Field number for the "slot" field.</summary>
            public const int SlotFieldNumber = 1;
            private readonly static uint SlotDefaultValue = 0;

            private uint slot_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public uint Slot
            {
                get { if ((_hasBits0 & 1) != 0) { return slot_; } else { return SlotDefaultValue; } }
                set
                {
                    _hasBits0 |= 1;
                    slot_ = value;
                }
            }
            /// <summary>Gets whether the "slot" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasSlot
            {
                get { return (_hasBits0 & 1) != 0; }
            }
            /// <summary>Clears the value of the "slot" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearSlot()
            {
                _hasBits0 &= ~1;
            }

            /// <summary>Field number for the "sticker_id" field.</summary>
            public const int StickerIdFieldNumber = 2;
            private readonly static uint StickerIdDefaultValue = 0;

            private uint stickerId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public uint StickerId
            {
                get { if ((_hasBits0 & 2) != 0) { return stickerId_; } else { return StickerIdDefaultValue; } }
                set
                {
                    _hasBits0 |= 2;
                    stickerId_ = value;
                }
            }
            /// <summary>Gets whether the "sticker_id" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasStickerId
            {
                get { return (_hasBits0 & 2) != 0; }
            }
            /// <summary>Clears the value of the "sticker_id" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearStickerId()
            {
                _hasBits0 &= ~2;
            }

            /// <summary>Field number for the "wear" field.</summary>
            public const int WearFieldNumber = 3;
            private readonly static float WearDefaultValue = 0F;

            private float wear_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public float Wear
            {
                get { if ((_hasBits0 & 4) != 0) { return wear_; } else { return WearDefaultValue; } }
                set
                {
                    _hasBits0 |= 4;
                    wear_ = value;
                }
            }
            /// <summary>Gets whether the "wear" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasWear
            {
                get { return (_hasBits0 & 4) != 0; }
            }
            /// <summary>Clears the value of the "wear" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearWear()
            {
                _hasBits0 &= ~4;
            }

            /// <summary>Field number for the "scale" field.</summary>
            public const int ScaleFieldNumber = 4;
            private readonly static float ScaleDefaultValue = 0F;

            private float scale_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public float Scale
            {
                get { if ((_hasBits0 & 8) != 0) { return scale_; } else { return ScaleDefaultValue; } }
                set
                {
                    _hasBits0 |= 8;
                    scale_ = value;
                }
            }
            /// <summary>Gets whether the "scale" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasScale
            {
                get { return (_hasBits0 & 8) != 0; }
            }
            /// <summary>Clears the value of the "scale" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearScale()
            {
                _hasBits0 &= ~8;
            }

            /// <summary>Field number for the "rotation" field.</summary>
            public const int RotationFieldNumber = 5;
            private readonly static float RotationDefaultValue = 0F;

            private float rotation_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public float Rotation
            {
                get { if ((_hasBits0 & 16) != 0) { return rotation_; } else { return RotationDefaultValue; } }
                set
                {
                    _hasBits0 |= 16;
                    rotation_ = value;
                }
            }
            /// <summary>Gets whether the "rotation" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasRotation
            {
                get { return (_hasBits0 & 16) != 0; }
            }
            /// <summary>Clears the value of the "rotation" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearRotation()
            {
                _hasBits0 &= ~16;
            }

            /// <summary>Field number for the "tint_id" field.</summary>
            public const int TintIdFieldNumber = 6;
            private readonly static uint TintIdDefaultValue = 0;

            private uint tintId_;
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public uint TintId
            {
                get { if ((_hasBits0 & 32) != 0) { return tintId_; } else { return TintIdDefaultValue; } }
                set
                {
                    _hasBits0 |= 32;
                    tintId_ = value;
                }
            }
            /// <summary>Gets whether the "tint_id" field is set</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool HasTintId
            {
                get { return (_hasBits0 & 32) != 0; }
            }
            /// <summary>Clears the value of the "tint_id" field</summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void ClearTintId()
            {
                _hasBits0 &= ~32;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override bool Equals(object other)
            {
                return Equals(other as Sticker);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public bool Equals(Sticker other)
            {
                if (ReferenceEquals(other, null))
                {
                    return false;
                }
                if (ReferenceEquals(other, this))
                {
                    return true;
                }
                if (Slot != other.Slot) return false;
                if (StickerId != other.StickerId) return false;
                if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Wear, other.Wear)) return false;
                if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Scale, other.Scale)) return false;
                if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
                if (TintId != other.TintId) return false;
                return Equals(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override int GetHashCode()
            {
                int hash = 1;
                if (HasSlot) hash ^= Slot.GetHashCode();
                if (HasStickerId) hash ^= StickerId.GetHashCode();
                if (HasWear) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Wear);
                if (HasScale) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Scale);
                if (HasRotation) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation);
                if (HasTintId) hash ^= TintId.GetHashCode();
                if (_unknownFields != null)
                {
                    hash ^= _unknownFields.GetHashCode();
                }
                return hash;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public override string ToString()
            {
                return pb::JsonFormatter.ToDiagnosticString(this);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void WriteTo(pb::CodedOutputStream output)
            {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                output.WriteRawMessage(this);
#else
        if (HasSlot) {
          output.WriteRawTag(8);
          output.WriteUInt32(Slot);
        }
        if (HasStickerId) {
          output.WriteRawTag(16);
          output.WriteUInt32(StickerId);
        }
        if (HasWear) {
          output.WriteRawTag(29);
          output.WriteFloat(Wear);
        }
        if (HasScale) {
          output.WriteRawTag(37);
          output.WriteFloat(Scale);
        }
        if (HasRotation) {
          output.WriteRawTag(45);
          output.WriteFloat(Rotation);
        }
        if (HasTintId) {
          output.WriteRawTag(48);
          output.WriteUInt32(TintId);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
#endif
            }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output)
            {
                if (HasSlot)
                {
                    output.WriteRawTag(8);
                    output.WriteUInt32(Slot);
                }
                if (HasStickerId)
                {
                    output.WriteRawTag(16);
                    output.WriteUInt32(StickerId);
                }
                if (HasWear)
                {
                    output.WriteRawTag(29);
                    output.WriteFloat(Wear);
                }
                if (HasScale)
                {
                    output.WriteRawTag(37);
                    output.WriteFloat(Scale);
                }
                if (HasRotation)
                {
                    output.WriteRawTag(45);
                    output.WriteFloat(Rotation);
                }
                if (HasTintId)
                {
                    output.WriteRawTag(48);
                    output.WriteUInt32(TintId);
                }
                if (_unknownFields != null)
                {
                    _unknownFields.WriteTo(ref output);
                }
            }
#endif

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public int CalculateSize()
            {
                int size = 0;
                if (HasSlot)
                {
                    size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Slot);
                }
                if (HasStickerId)
                {
                    size += 1 + pb::CodedOutputStream.ComputeUInt32Size(StickerId);
                }
                if (HasWear)
                {
                    size += 1 + 4;
                }
                if (HasScale)
                {
                    size += 1 + 4;
                }
                if (HasRotation)
                {
                    size += 1 + 4;
                }
                if (HasTintId)
                {
                    size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TintId);
                }
                if (_unknownFields != null)
                {
                    size += _unknownFields.CalculateSize();
                }
                return size;
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(Sticker other)
            {
                if (other == null)
                {
                    return;
                }
                if (other.HasSlot)
                {
                    Slot = other.Slot;
                }
                if (other.HasStickerId)
                {
                    StickerId = other.StickerId;
                }
                if (other.HasWear)
                {
                    Wear = other.Wear;
                }
                if (other.HasScale)
                {
                    Scale = other.Scale;
                }
                if (other.HasRotation)
                {
                    Rotation = other.Rotation;
                }
                if (other.HasTintId)
                {
                    TintId = other.TintId;
                }
                _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            public void MergeFrom(pb::CodedInputStream input)
            {
#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
                input.ReadRawMessage(this);
#else
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Slot = input.ReadUInt32();
              break;
            }
            case 16: {
              StickerId = input.ReadUInt32();
              break;
            }
            case 29: {
              Wear = input.ReadFloat();
              break;
            }
            case 37: {
              Scale = input.ReadFloat();
              break;
            }
            case 45: {
              Rotation = input.ReadFloat();
              break;
            }
            case 48: {
              TintId = input.ReadUInt32();
              break;
            }
          }
        }
#endif
            }

#if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
            [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
            void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input)
            {
                uint tag;
                while ((tag = input.ReadTag()) != 0)
                {
                    switch (tag)
                    {
                        default:
                            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                            break;
                        case 8:
                            {
                                Slot = input.ReadUInt32();
                                break;
                            }
                        case 16:
                            {
                                StickerId = input.ReadUInt32();
                                break;
                            }
                        case 29:
                            {
                                Wear = input.ReadFloat();
                                break;
                            }
                        case 37:
                            {
                                Scale = input.ReadFloat();
                                break;
                            }
                        case 45:
                            {
                                Rotation = input.ReadFloat();
                                break;
                            }
                        case 48:
                            {
                                TintId = input.ReadUInt32();
                                break;
                            }
                    }
                }
            }
#endif

        }

    }
    #endregion

}

#endregion


#endregion Designer generated code
